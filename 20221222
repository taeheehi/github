메모장1

오전 9:46 2022-12-20

🟠 2.3 라이브러리와 프레임워크 차이점
🟠 2.4 리액트 철학

A JavaScript library
for building user interfaces    
Renders UI and responds to events  : 한 단어로 components

respond to = reacts to
ui와 이벤트에 반응하는 라이브러리

🟠 2.5 컴포넌트 나누는 기준?

웹페이지를 박스단위로 바라보고, 사고하고, 구현해나가는 것이 중요하다.(컴포넌트들로)


어떤 단위로 컴포넌트를 나눠야 하나?  <~백지장도 맞들면 낫다~>
1) 재사용성 : 많이 사용하는 것을(최빈) 👉 컴포넌트로 만들자
2) 단일책임 : 재사용할일이 많이는 없더라도, 한 컴포넌트 안에서 너무 많은 UI를 가지고 있거나, 너무 많은 로직들이 들어있거나,  너무 다양한 일들을 하고 있다면, 이를 조금 더 작은 단위로 
한 UI에서는 하나의 도메인을 담당해서 보여줄 수 있도록 잘게잘게 컴포넌트들을 나눠서 만들 수 있다.
 2)단일 책임 요약) 한 컴포넌트 내에서 너무 다양한 일들을 처리하고 있다면 이를 2,3그룹 정도로 나누어서 작은 단위로 나눠가자.


🟠 2.6 리액트 동작 원리
ㄴ 함수형 컴포넌트

사용하는 곳 
<CounterButton name='드림코더'  />

컴포넌트 정의
export function CounterButton(props){
const [count, setCount] = useState(0);
return(
<div>
<h1>Hello, {props.name}</h1>
<button onClick={()=>setCount((count)=>count + 1)}>{count}</button>
</div>
);
}
 

보통 함수는 소문자로 시작하는데,
리액트 함수 컴포넌트는 무조건 대문자로 작성되어야 한다. 

그리고 함수형 컴포넌트는 HTML처럼 생긴 JSX문법을 반환, 리턴해주어야 한다. 

그래서 리엑트에게, 야 이 함수형 컴포넌트는 이 요소들을 보여주는 컴포넌트야. 라고 알려주어야 한다. 
자바스크립트에서, 함수반환값으로 HTML 처럼 생긴 것을 반환할 수 있는데, 이를 JSX라고 한다. JSX = JavaScript XML 의 약자

이 컴포넌트가 가지고 있는 상태는 useSatate를 함수를 이용해서, 변수형태로 상태값을 저장하는데요.
외부에서 상태의 버튼의 이름을, 지정할수 있다면, 속성값을 전달할 수 있다면, 
properties의 약자인 props은 외부에서 함수의 인자로 전달해 줄 수 있다.

(정리)
리액트란 컴포넌트들의 집합체이다.
리액트에서 컴포넌트들을 정의하는 방법은 바로, 함수로 정의하면 된다. 
대신 함수로 반환하는 값은, 우리가 UI상에 표기할 HTML처럼 생긴 JSX문법으로 만들면 되고, 이 컴포넌트에서 가지고 있는 상태에 관련된 데이터는 useState를 사용하면 되는 것이고, 외부에서 변경가능한 속성은 props로 전달받으면 된다. 
즉, 리액트 컴포넌트는 render, state, props 로 구성되어져 있다. 
ㄴ 여기까지 UI를 표기하는, rendering 하는 것에 대한 것이라면.

이제 사용자의 이벤트에 reacting 하는 방법에 대해 알려드리겠다.
React는 컴포넌트들의 집합체이고, 각각의 컴포넌트들은 그들이 상태값을 가지고 있는 state들로 구성되어 있다. 그리고 사용자가 클릭을 하거나 데이터를 입력을 했을 때, 우리는 이 상태값을 업데이트 하면 된다. 

그러면 리엑트에서 자동으로, 이 상태값이 변경된 컴포넌트들만 새롭게 업데이트를 해준다.  

⭐꼭 알아야 하는 키워드 👉 DEEP 하게 알 필요성이 있다.

🔹DOM
🔹DOM Tree

우리가 HTML로 작성한 것이 브라우저에 표시되기 위해서는 DOM tree로 구성이 되야 하는데, 
리액트에서도 마찬가지입니다.
대신에 리엑트는, 바로 브라우저에 있는 DOM tree를 변경하는 것이 아니라, 가상의 Dom tree를 가지고 있다. 
그래서 리엑트에서 어떤 상태값이 변경이 되어서, 무언가 업데이트가 된다면, DOM tree에 업데이트가 되는 것이 아니라,
 변경이 일어나기 이전의 virtual DOM tree와 비교를 하게 됩니다. 
그 비교를 통한 차이점으로 변경사항을 캐치하게 되고, 
그 다음에, 실제로 브라우저에서 필요한 돔트리요소를 업데이트하게 되는 것이다. 

그래서 리액트 어플리케이션에서 제아무리 스테이트들을 업데이트 한다고 해도, 실제로 브라우서에는 업데이트 되는 노드들만 업데이트가 되기 때문에 
리액트가 조금 더 효율적이고 빠르게 브라우저상에 업데이트가 된다고 보면은 된다. 


사용자가 느끼기에 스무스하고 빠르게 업뎃이 일어나기 위해서는 60fps(1초에  60개의 프레임이 보여져야지) 잘 동작한다고 느끼게 되는데 
리액트에서는 상태값을 많이 변경해도 
리액트에서 자체적으로 효율적으로 업데이트를 해준다. 

+리액트에는 단 하나의 루트 요소가 있습니다.

-----------------------------------------------------------------------------------------------------------------------------------------------------

메모장2

재사용성 DRY : Don't Repeat Yourself
단일책임 SR : Single Responsibility

-----------------------------------------------------------------------------------------------------------------------------------------------------

8.6 추가하기 구현하기
todo가 추가가 되면 나에게 알려줘~ 라는 기능을 콜백함수를 AddtTodo에 prop으로 전달해주면 되요.!  ( 現File : TodoList.jsx )
-----------------------------------------------------------------------------------------------------------------------------------------------------

